---
import Layout from "../layouts/Layout.astro";
import Footer from "../components/Footer.astro";
---

<Layout title="WiiLink Mii Stamp Generator" />
<div class="flex items-center justify-center relative">
  <div
    id="drop-area"
    class="md:m-8 m-3 sm:w-[calc(100vw-100px)] w-[calc(100vw-10px)] sm:h-[calc(100vh-100px)] h-[calc(100vh-10px)] md:border-4 border-dashed border-white rounded-3xl flex flex-col gap-5 items-center justify-between text-white transition-all"
  >
    <div></div>
    <div class="flex flex-col items-center text-center max-w-[600px]">
      <img src="/img/miistampgenerator-logo.png" class="mb-10 w-72 invert" alt="Mii Stamp Generator logo" />
      <b class="text-3xl" id="drop-text">Drag and drop your Mii (.miigx) file</b
      >
      <p id="error-message" class="mt-3 opacity-60">
        This tool will download an stl file of a stamp with the Mii you
        uploaded, this process may take upwards of 2 minutes to complete.
      </p>
      <input type="file" id="fileElem" accept=".miigx" style="display: none;" />
    </div>
    <div class="sm:w-[calc(100%-50px)] w-full flex flex-col items-center">
      <div id="deleteHistory" class="w-full flex items-center justify-between">
        <p class="text-white font-bold flex items-center">
          <i class="fa-solid fa-history mr-2"></i> History
        </p>
        <a
          onclick="localStorage.removeItem('files'); updateHistory();"
          class="px-3 py-2 rounded-lg text-white font-bold hover:bg-red-500 cursor-pointer transition-all"
          ><i class="fa-solid fa-trash-can"></i></a
        >
      </div>
      <div class="mb-3 w-full rounded-xl overflow-scroll overflow-y-hidden">
        <div id="local-files" class="flex flex-row gap-3 items-center">
        </div>
      </div>

      <div class="line-container opacity-60">
        <div class="line"></div>
        <p class="mx-3">Advanced</p>
        <div class="line"></div>
      </div>
      <div
        class="mt-3 mb-6 w-full sm:w-auto flex sm:flex-row flex-col sm:gap-3 gap-5 items-center justify-center relative"
      >
        <select class="w-full sm:w-auto sm:mr-5 rounded-lg bg-blue-400 hover:bg-blue-400/60 active:bg-blue-400/80 active:scale-95 px-5 py-2 transition-all" id="expression">
          <option value="normal" disabled selected>Select expression</option>
          <option value="normal">Normal</option>
          <option value="smile">Smile</option>
          <option value="anger">Anger</option>
          <option value="sorrow">Sorrow</option>
          <option value="surprise">Surprise</option>
          <option value="blink">Blink</option>
          <option value="normal_open_mouth">Normal Surprise</option>
          <option value="smile_open_mouth">Smile Surprise</option>
          <option value="anger_open_mouth">Anger Surprise</option>
          <option value="surprise_open_mouth">Surprise</option>
          <option value="sorrow_open_mouth">Sorrow Surprise</option>
          <option value="blink_open_mouth">Blink Surprise</option>
          <option value="wink_left">Wink Right</option>
          <option value="wink_right">Wink Left</option>
          <option value="wink_left_open_mouth">Wink Left Surprise</option>
          <option value="wink_right_open_mouth">Wink Right Surprise</option>
          <option value="like_wink_left">Wink Right (Miiverse)</option>
          <option value="like_wink_right">Wink Left (Miiverse)</option>
          <option value="frustrated">Frustrated</option>
        </select>
        <span class="sm:block hidden">|</span>
        <div class="flex flex-row items-center gap-3">
          <button
            class="ml-5 text-white font-bold hover:underline"
            onclick="localStorage.setItem('generate', 0); document.getElementById('fileElem').click();"
          >
            <i class="fa-solid fa-stamp"></i> Generate stamp
          </button>
          <button
            class="ml-3 mr-3 text-white font-bold hover:underline"
            onclick="localStorage.setItem('generate', 1); document.getElementById('fileElem').click();"
          >
            <i class="fa-solid fa-user"></i> Only face
          </button>
          <button
            class="mr-5 text-white font-bold hover:underline"
            onclick="localStorage.setItem('generate', 2); document.getElementById('fileElem').click();"
          >
            <i class="fa-solid fa-file-code"></i> SVG
          </button>
        </div>
        <span class="sm:block hidden">|</span>
        <a
          href="https://miicontest.wiilink.ca/search"
          class="ml-5 hover:underline"
          ><i class="fa-solid fa-search"></i> Search for Miis</a
        >
      </div>
    </div>
  </div>
  <div
    id="progress-container"
    class="m-8 w-[calc(100vw-100px)] h-[calc(100vh-100px)] md:border-4 border-dashed border-white rounded-3xl hidden flex-col gap-5 items-center justify-between text-white transition-all"
  >
    <div></div>
    <div class="flex flex-row gap-3 items-center">
      <img
        src="/img/loading.gif"
        class="h-10 brightness-[10000%]"
      />
      <p class="text">
        <b id="job-status">In queue...</b><br />
        <span class="opacity-60">It may take up to 2 minutes.</span>
      </p>
    </div>
    <p
      id="job-id"
      class="mb-6 opacity-60 cursor-pointer"
      title="Got an error? Open a support ticket with this jobID."
    >
    </p>
  </div>
  <div
    id="err-multiple-instance"
    class="m-8 w-[calc(100vw-100px)] h-[calc(100vh-100px)] md:border-4 border-dashed border-white rounded-3xl hidden flex-col gap-3 items-center justify-center text-white transition-all"
  >
    <i class="mb-5 fa-solid fa-exclamation-triangle text-7xl"></i>
    <h1 class="text-4xl font-bold">Continue on the other tab!</h1>
    <p class="opacity-60">
      The site is already open in another tab. Please continue there.
    </p>
  </div>
</div>
<Footer />

<script is:inline>
  let base64String;

  // Check if the site is already open in another tab
  if (localStorage.getItem("siteOpen") === "true") {
    document.getElementById("drop-area").remove();
    document.getElementById("err-multiple-instance").classList.remove("hidden");
    document.getElementById("err-multiple-instance").classList.add("flex");
  } else {
    // Set the flag in localStorage
    localStorage.setItem("siteOpen", "true");

    // Remove the flag when the user closes the tab or navigates away
    window.addEventListener("beforeunload", () => {
      localStorage.removeItem("siteOpen");
    });
  }

  function renderMii(file) {
    const reader = new FileReader();
    reader.onload = function (event) {
      const result = event.target.result;
      if (typeof result === "string") {
        base64String = result.split(",")[1];
        // Proceed with the base64String
      } else {
        console.error("Unexpected result type:", typeof result);
      }

      // Send the data to the server
      const formData = new FormData();
      formData.append("stamp", localStorage.getItem("generate")); // 0 for stamp, 1 for face, 2 for svg
      formData.append("filename", file.name);
      formData.append("platform", "wii");
      formData.append("data", base64String);
      formData.append(
        "expression",
        document.getElementById("expression").value
      );

      // Show progress bar
      document.getElementById("progress-container").classList.remove("hidden");
      document.getElementById("progress-container").classList.add("flex");
      document.getElementById("drop-area").classList.add("hidden");

      // Add beforeunload event listener to prevent user from leaving the page
      window.addEventListener("beforeunload", beforeUnloadHandler);

      fetch(`http://localhost:3000/generate-stamp`, {
        method: "POST",
        body: formData,
      })
        .then((response) => {
          if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
          }
          return response.json();
        })
        .then((data) => {
          const jobId = data.jobId;
          document.getElementById("job-id").innerHTML =
            `<i class="fa-solid fa-fingerprint"></i> ${jobId}`;
          document.getElementById("job-status").innerHTML = `${data.status}`;
          checkJobStatus(jobId);
        })
        .catch((error) => {
          console.error("Error:", error);
          // Display error message
          const errorMessage = document.getElementById("error-message");
          errorMessage.classList.remove("opacity-60");
          errorMessage.innerHTML = `<div class="px-10 py-3 rounded-lg bg-red-600"><i class="fa-solid fa-triangle-exclamation"></i> ${error.message}</div>`;
          errorMessage.classList.remove("hidden");

          // Hide progress bar and show drop area
          document.getElementById("progress-container").classList.add("hidden");
          document.getElementById("drop-area").classList.remove("hidden");

          // Remove beforeunload event listener
          window.removeEventListener("beforeunload", beforeUnloadHandler);
        });
    };
    reader.readAsDataURL(file);
  }

  function checkJobStatus(jobId) {
    fetch(`http://localhost:3000/check-status/${jobId}`)
      .then((response) => {
        if (!response.ok) {
          throw new Error(`HTTP error! status: ${response.status}`);
        }
        return response.json();
      })
      .then((data) => {
        if (data.status === "Completed") {
          const blob = new Blob([data.result.stl], { type: "application/sla" });
          const url = URL.createObjectURL(blob);
          const a = document.createElement("a");
          if (Number(localStorage.getItem("generate")) === 2) {
            a.setAttribute("download", data.result.name + " Stamp.svg");
          } else {
            a.setAttribute("download", data.result.name + " Stamp.stl");
          }
          a.setAttribute("href", url);
          a.click();

          if (localStorage.getItem("noHistory") === "true") {
            localStorage.removeItem("noHistory");
          } else {
            const files = JSON.parse(localStorage.getItem("files")) || [];
            if (Number(localStorage.getItem("generate")) === 2) {
              files.push({
                id: data.result.id,
                type: localStorage.getItem("generate"),
                name: data.result.name,
                data: data.result.stl,
              });
            } else {
              files.push({
                id: data.result.id,
                type: localStorage.getItem("generate"),
                name: data.result.name,
                data: base64String,
              });
            }
            localStorage.setItem("files", JSON.stringify(files));
            updateHistory();
          }

          // Hide progress bar and show drop area
          document.getElementById("progress-container").classList.add("hidden");
          document.getElementById("drop-area").classList.remove("hidden");
          document.getElementById("error-message").innerHTML =
            "This tool will download an stl file of a stamp with the Mii you uploaded, this process may take upwards of 2 minutes to complete.";

          // Remove beforeunload event listener
          window.removeEventListener("beforeunload", beforeUnloadHandler);
        } else if (data.status === "Error") {
          throw new Error(data.result);
        } else {
          document.getElementById("job-id").innerHTML =
            `<i class="fa-solid fa-fingerprint"></i> ${jobId}`;
          document.getElementById("job-status").innerHTML = `${data.status}`;
          setTimeout(() => checkJobStatus(jobId), 500); // Check again after 1 second
        }
      })
      .catch((error) => {
        console.error("Error:", error);
        // Display error message
        const errorMessage = document.getElementById("error-message");
        errorMessage.classList.remove("opacity-60");
        errorMessage.innerHTML = `<div class="px-10 py-3 rounded-lg bg-red-600"><i class="fa-solid fa-triangle-exclamation"></i> ${error.message}</div>`;
        errorMessage.classList.remove("hidden");

        // Hide progress bar and show drop area
        document.getElementById("progress-container").classList.add("hidden");
        document.getElementById("drop-area").classList.remove("hidden");

        // Remove beforeunload event listener
        window.removeEventListener("beforeunload", beforeUnloadHandler);
      });
  }

  function beforeUnloadHandler(event) {
    event.preventDefault();
    event.returnValue =
      "Processing is in progress. Are you sure you want to leave?";
  }

  const dropArea = document.getElementById("drop-area");

  dropArea.addEventListener("dragover", (event) => {
    event.preventDefault();
    dropArea.style.backdropFilter = "blur(8px)";
    dropArea.style.filter = "brightness(130%)";
    document.getElementById("drop-text").innerHTML =
      '<i class="fa-solid fa-fire"></i> Drop it like it\'s hot!';
  });

  dropArea.addEventListener("dragleave", () => {
    dropArea.style.backdropFilter = "blur(0px)";
    dropArea.style.filter = "brightness(100%)";
    document.getElementById("drop-text").innerHTML =
      "Drag and drop your Mii (.miigx) file";
  });

  dropArea.addEventListener("drop", (event) => {
    event.preventDefault();
    dropArea.style.backdropFilter = "blur(0px)";
    dropArea.style.filter = "brightness(100%)";
    document.getElementById("drop-text").innerHTML =
      "Drag and drop your Mii (.miigx) file";
    const file = event.dataTransfer.files[0];
    if (file && file.name.endsWith(".miigx")) {
      localStorage.setItem("generate", "0");
      renderMii(file);
    } else {
      alert("Please upload a .miigx file.");
    }
  });

  const fileElem = document.getElementById("fileElem");
  fileElem.addEventListener("change", (event) => {
    const file = event.target.files[0];
    if (file && file.name.endsWith(".miigx")) {
      renderMii(file);
    } else {
      alert("Please upload a .miigx file.");
    }
  });

  document.addEventListener("DOMContentLoaded", () => {
    localStorage.removeItem("noHistory");
    updateHistory();
  });

  function updateHistory() {
    const files = JSON.parse(localStorage.getItem("files")) || [];
    const localFiles = document.getElementById("local-files");
    localFiles.innerHTML = "";

    const deleteHistory = document.getElementById("deleteHistory");
    if (files.length > 0) {
      deleteHistory.classList.remove("hidden");
    } else {
      deleteHistory.classList.add("hidden");
    }

    files.forEach((file, index) => {
      let icon;
      let content;
      try {
        switch (file.type) {
          case "0":
            icon = "stamp";
            content = `<i class="p-3 fa-solid fa-${icon} bg-blue-400 rounded-lg"></i> <span><span class="file-name">${file.name}</span><br><span class="opacity-60">Stamp</span></span>`;
            break;
          case "1":
            icon = "user";
            content = `<i class="p-3 fa-solid fa-${icon} bg-blue-400 rounded-lg"></i> <span><span class="file-name">${file.name}</span><br><span class="opacity-60">Face</span></span>`;
            break;
          case "2":
            let svgContent = file.data;
            // Set width and height of SVG to 40px
            svgContent = svgContent.replace(
              "<svg",
              '<svg width="40" height="40"'
            );
            content = `<div class="p-0 bg-blue-400 rounded-lg"><span class="invert">${svgContent}</span></div> <span><span class="file-name">${file.name}</span><br><span class="opacity-60">SVG</span></span>`;
            break;
          default:
            throw new Error("Unknown file type");
        }
      } catch (error) {
        console.error("Error decoding file data:", error);
        content = `<div class="p-3 bg-red-400 rounded-lg">Error loading file</div> ${file.name}`;
      }
      const a = document.createElement("a");
      a.innerHTML = `<div onclick="downloadHistoryFile(${index});" class="flex flex-row items-center justify-start gap-3 p-2 pr-3 rounded-xl bg-blue-600/20 cursor-pointer border-2 hover:border-white/60 border-blue-600/0 active:scale-95 transition-all">${content}</div>`;
      localFiles.appendChild(a);
    });
  }

  function downloadHistoryFile(index) {
    localStorage.setItem("noHistory", true);
    const files = JSON.parse(localStorage.getItem("files")) || [];
    const data = files[index];
    if (data.type == "2") {
      const blob = new Blob([data.data], { type: "application/sla" });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.setAttribute("download", data.name + " Stamp.svg");
      a.setAttribute("href", url);
      a.click();
    } else {
      const byteCharacters = atob(data.data);
      const byteNumbers = new Array(byteCharacters.length);
      for (let i = 0; i < byteCharacters.length; i++) {
        byteNumbers[i] = byteCharacters.charCodeAt(i);
      }
      const byteArray = new Uint8Array(byteNumbers);
      const blob = new Blob([byteArray], { type: "application/octet-stream" });
      const fakeFile = new File([blob], `${data.name}.miigx`, {
        type: "application/octet-stream",
      });
      localStorage.setItem("generate", data.type);
      renderMii(fakeFile);
    }
  }
</script>

<style is:global>
  .line-container {
    width: 100%;
    display: flex;
    align-items: center;
  }
  .line {
    flex: 1;
    height: 1px;
    background-color: white;
  }
  .file-name {
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
  }
</style>
